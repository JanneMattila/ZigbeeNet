//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.13
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Digi.XBee.Internal.Protocol
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using Microsoft.Extensions.Logging;
    
    
    /// <summary>
    /// Helper factory class to create <see cref="XBeeEventFactory"/> classes.
    /// </summary>
    public class XBeeEventFactory
    {
        
        private static IDictionary<int?, Type> _events = new ConcurrentDictionary<int?, Type>();
        
        static XBeeEventFactory()
        {
            _events.Add(0x8A, typeof(XBeeModemStatusEvent));
            _events.Add(0x90, typeof(XBeeReceivePacketEvent));
            _events.Add(0x91, typeof(XBeeReceivePacketExplicitEvent));
            _events.Add(0xA0, typeof(XBeeOtaFirmwareUpdateStatusEvent));
            _events.Add(0xA1, typeof(XBeeRouteRecordEvent));
            _events.Add(0xA3, typeof(XBeeManyToOneRouteRequestEvent));
        }
        
        public static IXBeeEvent GetXBeeFrame(int[] data)
        {
            _events.TryGetValue(data[2], out Type xbeeClass);
            if (xbeeClass == null)
            {
                return null;
            }
            try
            {
                IXBeeEvent xbeeFrame = Activator.CreateInstance(xbeeClass) as IXBeeEvent;
                xbeeFrame.Deserialize(data);
                return xbeeFrame;
            }
            catch (Exception ex)
            {
                ZigBeeDongleXBee.Logger.LogDebug("Error creating instance of IXBeeResponse", ex);
            }
            return null;
        }
    }
}
